AWSTemplateFormatVersion: '2010-09-09'
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: cloud-mockmentor-bucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - "*"

  AnswerRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: answer-request-queue

  AnswerResponseQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: answer-response-queue

  EmotionRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: emotion-request-queue

  EmotionResponseQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: emotion-response-queue

  FeedbackRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: feedback-request-queue

  FeedbackResponseQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: feedback-response-queue

  VideoConversionRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: video-conversion-request-queue

  VideoConversionResponseQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: video-conversion-response-queue

  MockmentorVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: mockmentor-vpc

  MockmentorInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: mockmentor-internet-gateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MockmentorVPC
      InternetGatewayId: !Ref MockmentorInternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MockmentorVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: Name
          Value: mockmentor-public-subnet-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MockmentorVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'us-east-1b'
      Tags:
        - Key: Name
          Value: mockmentor-public-subnet-1b

  PrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MockmentorVPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: 'us-east-1c'
      Tags:
        - Key: Name
          Value: mockmentor-private-subnet-1c

  PrivateSubnet1d:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MockmentorVPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: 'us-east-1d'
      Tags:
        - Key: Name
          Value: mockmentor-private-subnet-1d

  PrivateSubnetNgw1e:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MockmentorVPC
      CidrBlock: '10.0.5.0/24'
      AvailabilityZone: 'us-east-1e'
      Tags:
        - Key: Name
          Value: mockmentor-private-subnet-ngw-1e

  PrivateSubnetNgw1f:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MockmentorVPC
      CidrBlock: '10.0.6.0/24'
      AvailabilityZone: 'us-east-1f'
      Tags:
        - Key: Name
          Value: mockmentor-private-subnet-ngw-1f

  NatElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NatElasticIP

  MockmentorNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: mockmentor-nat-gateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MockmentorVPC
      Tags:
        - Key: Name
          Value: mockmentor-route-table-public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MockmentorInternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MockmentorVPC
      Tags:
        - Key: Name
          Value: mockmentor-route-table-private

  PrivateSubnetRouteTableAssociation1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1c
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation1d:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1d
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteTableNgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MockmentorVPC
      Tags:
        - Key: Name
          Value: mockmentor-route-table-private-ngw

  PrivateRouteNgw:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableNgw
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref MockmentorNatGateway

  PrivateSubnetRouteTableAssociationNgw1e:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetNgw1e
      RouteTableId: !Ref PrivateRouteTableNgw

  PrivateSubnetRouteTableAssociationNgw1f:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetNgw1f
      RouteTableId: !Ref PrivateRouteTableNgw
  
  MockmentorSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'subnet groups for rds'
      SubnetIds:
        - !Ref PrivateSubnet1c
        - !Ref PrivateSubnet1d
      DBSubnetGroupName: mockmentor-subnet-groups
      Tags:
        - Key: Name
          Value: mockmentor-subnet-groups

  MockmentorSecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group'
      VpcId: !Ref MockmentorVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: mockmentor-security-group-public

  MockmentorRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: mockmentordb
      DBName: mockmentordb
      Engine: mysql
      DBInstanceClass: db.t3.micro
      MasterUsername: admin
      MasterUserPassword: Admin12345
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref MockmentorSubnetGroup
      VPCSecurityGroups:
        - !Ref MockmentorSecurityGroupPublic
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: mockmentor-rds-instance

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: frontend-target-group
      Protocol: 'HTTP'
      Port: 80
      VpcId: !Ref MockmentorVPC
      HealthCheckEnabled: true
      TargetType: 'ip'
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: backend-target-group
      Protocol: 'HTTP'
      Port: 8080
      VpcId: !Ref MockmentorVPC
      HealthCheckEnabled: true
      TargetType: 'ip'
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: '/api/Questions/healthCheck'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: VPCGatewayAttachment
    Properties:
      Name: mockmentor-load-balancer
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MockmentorSecurityGroupPublic
      Type: application

  FrontendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP
  
  MockmentorECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: mockmentor-ecs-cluster
  
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: frontend-task-definition
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: arn:aws:iam::655419273073:role/LabRole
      TaskRoleArn: arn:aws:iam::655419273073:role/LabRole
      ContainerDefinitions:
        - Name: frontend-container
          Image: kevalgandevia/mockmentor-frontend:latest
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
  
  FrontendService:
    Type: AWS::ECS::Service
    DependsOn:
      - FrontendListener
      - MockmentorRDSInstance
    Properties:
      Cluster: !Ref MockmentorECSCluster
      DesiredCount: 1
      LaunchType: 'FARGATE'
      ServiceName: frontend-service
      TaskDefinition: !Ref FrontendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref MockmentorSecurityGroupPublic
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: frontend-container
          ContainerPort: 80
          TargetGroupArn: !Ref FrontendTargetGroup
  
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: backend-rest-api-task-definition
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: arn:aws:iam::655419273073:role/LabRole
      TaskRoleArn: arn:aws:iam::655419273073:role/LabRole
      ContainerDefinitions:
        - Name: backend-restapi-container
          Image: kevalgandevia/mockmentor-backend-restapi:latest
          PortMappings:
            - ContainerPort: 8080
              Protocol: tc
  
  BackendRestApiService:
    Type: AWS::ECS::Service
    DependsOn:
      - BackendListener
      - MockmentorRDSInstance
    Properties:
      Cluster: !Ref MockmentorECSCluster
      DesiredCount: 1
      LaunchType: 'FARGATE'
      ServiceName: backend-restapi-service
      TaskDefinition: !Ref BackendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - !Ref MockmentorSecurityGroupPublic
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: backend-restapi-container
          ContainerPort: 8080
          TargetGroupArn: !Ref BackendTargetGroup


  BackendConsumerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: backend-consumer-task-definition
      Cpu: '2048'
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: arn:aws:iam::655419273073:role/LabRole
      TaskRoleArn: arn:aws:iam::655419273073:role/LabRole
      ContainerDefinitions:
        - Name: backend-consumer-container
          Image: kevalgandevia/mockmentor-backend-consumer:latest
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp

  BackendConsumerService:
    Type: AWS::ECS::Service
    DependsOn:
      - MockmentorRDSInstance
    Properties:
      Cluster: !Ref MockmentorECSCluster
      DesiredCount: 1
      LaunchType: 'FARGATE'
      ServiceName: backend-consumer-service
      TaskDefinition: !Ref BackendConsumerTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref MockmentorSecurityGroupPublic
          Subnets:
            - !Ref PrivateSubnetNgw1e
            - !Ref PrivateSubnetNgw1f

  FeedbackEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - FeedbackRequestQueue
      - FeedbackResponseQueue
    Properties:
      InstanceType: t2.micro
      ImageId: ami-055744c75048d8296
      SubnetId: !Ref PrivateSubnetNgw1e
      KeyName: cloud-mock-mentor-key-pair
      SecurityGroupIds:
        - !Ref MockmentorSecurityGroupPublic
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu
          docker pull kevalgandevia/mockmentor-feedback:latest
          docker run -d -p 6001:80 kevalgandevia/mockmentor-feedback
      Tags:
        - Key: Name
          Value: feedback-ec2-instance

  RecognitionEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - EmotionRequestQueue
      - EmotionResponseQueue
    Properties:
      InstanceType: t2.small
      ImageId: ami-055744c75048d8296
      SubnetId: !Ref PrivateSubnetNgw1e
      KeyName: cloud-mock-mentor-key-pair
      SecurityGroupIds:
        - !Ref MockmentorSecurityGroupPublic
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu
          docker pull kevalgandevia/mockmentor-recognition:latest
          docker run -d -p 6002:80 kevalgandevia/mockmentor-recognition
      Tags:
        - Key: Name
          Value: recognition-ec2-instance
  
  TranscribeEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - AnswerRequestQueue
      - AnswerResponseQueue
    Properties:
      InstanceType: t2.micro
      ImageId: ami-055744c75048d8296
      SubnetId: !Ref PrivateSubnetNgw1e
      KeyName: cloud-mock-mentor-key-pair
      SecurityGroupIds:
        - !Ref MockmentorSecurityGroupPublic
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu
          docker pull kevalgandevia/mockmentor-transcribe:latest
          docker run -d -p 6003:80 kevalgandevia/mockmentor-transcribe
      Tags:
        - Key: Name
          Value: transcribe-ec2-instance
  
  VideoConversionEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - VideoConversionRequestQueue
      - VideoConversionResponseQueue
    Properties:
      InstanceType: t2.small
      ImageId: ami-055744c75048d8296
      SubnetId: !Ref PrivateSubnetNgw1e
      KeyName: cloud-mock-mentor-key-pair
      SecurityGroupIds:
        - !Ref MockmentorSecurityGroupPublic
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu
          docker pull kevalgandevia/mockmentor-video-conversion:latest
          docker run -d -p 6004:80 kevalgandevia/mockmentor-video-conversion
      Tags:
        - Key: Name
          Value: video-conversion-ec2-instance